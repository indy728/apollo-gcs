[{"/Users/kylemurray/apollo-file-upload/client/src/App.js":"1","/Users/kylemurray/apollo-file-upload/client/src/reportWebVitals.js":"2","/Users/kylemurray/apollo-file-upload/client/src/apollo.js":"3","/Users/kylemurray/apollo-file-upload/client/src/components/apollo/index.js":"4","/Users/kylemurray/apollo-file-upload/client/src/components/apollo/mutations.gql.js":"5","/Users/kylemurray/apollo-file-upload/client/src/components/apollo/queries.gql.js":"6","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/index.js":"7","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/file-form-list.upload.js":"8","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/file-selector.upload.js":"9","/Users/kylemurray/apollo-file-upload/client/src/components/navigation/index.js":"10","/Users/kylemurray/apollo-file-upload/client/src/components/navigation/TopNav/index.js":"11","/Users/kylemurray/apollo-file-upload/client/src/components/Search/components/Search/index.js":"12","/Users/kylemurray/apollo-file-upload/client/src/components/Search/components/Search/components/index.js":"13","/Users/kylemurray/apollo-file-upload/client/src/components/Search/components/Search/components/search-field.search.js":"14","/Users/kylemurray/apollo-file-upload/client/src/components/Search/components/Search/components/track-list.search.js":"15","/Users/kylemurray/apollo-file-upload/client/src/components/ui/containers/index.js":"16","/Users/kylemurray/apollo-file-upload/client/src/components/ui/flex-util/index.js":"17","/Users/kylemurray/apollo-file-upload/client/src/components/ui/buttons/index.js":"18","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/index.js":"19","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/header/index.js":"20","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/index.js":"21","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/bpm.controller.js":"22","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/genre.controller.js":"23","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/track-duration.controller.js":"24","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/track-key.controller.js":"25","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/artist.controller.js":"26","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/header/header.styles.js":"27","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/upload-filename.controller.js":"28","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/track-title.controller.js":"29","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/upload-form.styles.js":"30","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/upload-field/index.js":"31","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/upload-field/upload-field.styles.js":"32","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/tags/index.js":"33","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/tags/tag-list.js":"34","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/tags/tag-input.js":"35","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/tags/tags.styles.js":"36","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/legend/index.js":"37","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/legend/legend.styles.js":"38","/Users/kylemurray/apollo-file-upload/client/src/components/util/index.js":"39","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/util/index.js":"40","/Users/kylemurray/apollo-file-upload/client/src/components/util/string.util.js":"41","/Users/kylemurray/apollo-file-upload/client/src/index.js":"42","/Users/kylemurray/apollo-file-upload/client/src/components/Auth/index.tsx":"43","/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth.styles.tsx":"44","/Users/kylemurray/apollo-file-upload/client/src/components/ui/index.ts":"45","/Users/kylemurray/apollo-file-upload/client/src/components/ui/brand/index.ts":"46","/Users/kylemurray/apollo-file-upload/client/src/components/ui/typography/index.tsx":"47","/Users/kylemurray/apollo-file-upload/client/src/components/ui/brand/brand.components.tsx":"48","/Users/kylemurray/apollo-file-upload/client/src/components/ui/typography/typography.styles.tsx":"49","/Users/kylemurray/apollo-file-upload/client/src/components/ui/brand/brand.styles.tsx":"50","/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth-form/index.tsx":"51","/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth-form/components/index.tsx":"52","/Users/kylemurray/apollo-file-upload/client/src/global/index.ts":"53","/Users/kylemurray/apollo-file-upload/client/src/components/ui/dividers/index.ts":"54","/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth-form/components/sign-in.auth.tsx":"55","/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth-form/components/sign-up.auth.tsx":"56","/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth-form/components/auth-form.styles.tsx":"57","/Users/kylemurray/apollo-file-upload/client/src/generated/graphql.tsx":"58","/Users/kylemurray/apollo-file-upload/client/src/components/ui/inputs/index.tsx":"59","/Users/kylemurray/apollo-file-upload/client/src/components/Search/index.tsx":"60","/Users/kylemurray/apollo-file-upload/client/src/accessToken.ts":"61","/Users/kylemurray/apollo-file-upload/client/src/store/index.ts":"62","/Users/kylemurray/apollo-file-upload/client/src/store/slices/index.ts":"63","/Users/kylemurray/apollo-file-upload/client/src/store/slices/accessToken.ts":"64","/Users/kylemurray/apollo-file-upload/client/src/pages/Loading.tsx":"65"},{"size":6481,"mtime":1617392467198,"results":"66","hashOfConfig":"67"},{"size":433,"mtime":1615920034155,"results":"68","hashOfConfig":"67"},{"size":933,"mtime":1617128218606,"results":"69","hashOfConfig":"67"},{"size":61,"mtime":1611099599650,"results":"70","hashOfConfig":"67"},{"size":1193,"mtime":1615841126372,"results":"71","hashOfConfig":"67"},{"size":788,"mtime":1615841126373,"results":"72","hashOfConfig":"67"},{"size":942,"mtime":1614626162388,"results":"73","hashOfConfig":"67"},{"size":1609,"mtime":1614277213989,"results":"74","hashOfConfig":"67"},{"size":2308,"mtime":1614277213990,"results":"75","hashOfConfig":"67"},{"size":43,"mtime":1611353305772,"results":"76","hashOfConfig":"67"},{"size":2457,"mtime":1617316286761,"results":"77","hashOfConfig":"67"},{"size":884,"mtime":1616047204130,"results":"78","hashOfConfig":"67"},{"size":119,"mtime":1611356878957,"results":"79","hashOfConfig":"67"},{"size":1004,"mtime":1614277213986,"results":"80","hashOfConfig":"67"},{"size":4750,"mtime":1616047322991,"results":"81","hashOfConfig":"67"},{"size":515,"mtime":1615242240988,"results":"82","hashOfConfig":"67"},{"size":359,"mtime":1614277214009,"results":"83","hashOfConfig":"67"},{"size":1363,"mtime":1614277214008,"results":"84","hashOfConfig":"67"},{"size":7264,"mtime":1615242240984,"results":"85","hashOfConfig":"67"},{"size":578,"mtime":1614277213996,"results":"86","hashOfConfig":"67"},{"size":492,"mtime":1614277213992,"results":"87","hashOfConfig":"67"},{"size":403,"mtime":1614277213992,"results":"88","hashOfConfig":"67"},{"size":2073,"mtime":1615242240983,"results":"89","hashOfConfig":"67"},{"size":1306,"mtime":1614277213993,"results":"90","hashOfConfig":"67"},{"size":1227,"mtime":1614277213994,"results":"91","hashOfConfig":"67"},{"size":460,"mtime":1614277213991,"results":"92","hashOfConfig":"67"},{"size":435,"mtime":1614277213995,"results":"93","hashOfConfig":"67"},{"size":492,"mtime":1614277213995,"results":"94","hashOfConfig":"67"},{"size":450,"mtime":1615242240984,"results":"95","hashOfConfig":"67"},{"size":500,"mtime":1614277214003,"results":"96","hashOfConfig":"67"},{"size":1053,"mtime":1614277214001,"results":"97","hashOfConfig":"67"},{"size":924,"mtime":1616043098200,"results":"98","hashOfConfig":"67"},{"size":95,"mtime":1614277213999,"results":"99","hashOfConfig":"67"},{"size":819,"mtime":1614277214000,"results":"100","hashOfConfig":"67"},{"size":799,"mtime":1614277213999,"results":"101","hashOfConfig":"67"},{"size":1235,"mtime":1614277214001,"results":"102","hashOfConfig":"67"},{"size":381,"mtime":1614277213997,"results":"103","hashOfConfig":"67"},{"size":463,"mtime":1614277213998,"results":"104","hashOfConfig":"67"},{"size":30,"mtime":1614277214015,"results":"105","hashOfConfig":"67"},{"size":1549,"mtime":1614277214004,"results":"106","hashOfConfig":"67"},{"size":178,"mtime":1614277214015,"results":"107","hashOfConfig":"67"},{"size":837,"mtime":1616527214880,"results":"108","hashOfConfig":"67"},{"size":913,"mtime":1615920027156,"results":"109","hashOfConfig":"67"},{"size":1009,"mtime":1615242240978,"results":"110","hashOfConfig":"67"},{"size":194,"mtime":1615841126375,"results":"111","hashOfConfig":"67"},{"size":35,"mtime":1615242240987,"results":"112","hashOfConfig":"67"},{"size":1014,"mtime":1617060684782,"results":"113","hashOfConfig":"67"},{"size":200,"mtime":1615242240986,"results":"114","hashOfConfig":"67"},{"size":385,"mtime":1615841126377,"results":"115","hashOfConfig":"67"},{"size":250,"mtime":1615242240986,"results":"116","hashOfConfig":"67"},{"size":954,"mtime":1615842774042,"results":"117","hashOfConfig":"67"},{"size":99,"mtime":1615841126368,"results":"118","hashOfConfig":"67"},{"size":72,"mtime":1615917552225,"results":"119","hashOfConfig":"67"},{"size":171,"mtime":1615841126375,"results":"120","hashOfConfig":"67"},{"size":3370,"mtime":1617316870343,"results":"121","hashOfConfig":"67"},{"size":4192,"mtime":1617315800863,"results":"122","hashOfConfig":"67"},{"size":743,"mtime":1615841126367,"results":"123","hashOfConfig":"67"},{"size":18674,"mtime":1617314154251,"results":"124","hashOfConfig":"67"},{"size":1499,"mtime":1615919928329,"results":"125","hashOfConfig":"67"},{"size":437,"mtime":1615923340800,"results":"126","hashOfConfig":"67"},{"size":284,"mtime":1615927012436,"results":"127","hashOfConfig":"67"},{"size":464,"mtime":1616529327153,"results":"128","hashOfConfig":"67"},{"size":184,"mtime":1616529338857,"results":"129","hashOfConfig":"67"},{"size":460,"mtime":1616530877373,"results":"130","hashOfConfig":"67"},{"size":3681,"mtime":1617392385702,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"j2rfp2",{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"136"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"136"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"136"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"136"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"136"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"136"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"136"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"136"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"136"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"136"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"136"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"136"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"136"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"136"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"136"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"136"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"136"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"136"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"136"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"136"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"136"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"136"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"136"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"242"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"242"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"242"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"242"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"242"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"242"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"285"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"242"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kylemurray/apollo-file-upload/client/src/App.js",["294","295","296","297","298","299","300","301","302"],"/Users/kylemurray/apollo-file-upload/client/src/reportWebVitals.js",[],[],"/Users/kylemurray/apollo-file-upload/client/src/apollo.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/apollo/index.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/apollo/mutations.gql.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/apollo/queries.gql.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Upload/index.js",["303"],"import React from 'react';\nimport styled from 'styled-components';\nimport {useMutation, useQuery} from '@apollo/client';\nimport {FILES_QUERY, STAGE_TRACKS, UNSTAGE_TRACKS} from '../apollo'\nimport FileFormList from './file-form-list.upload';\nimport FileSelector from './file-selector.upload';\n\nconst UploadPage = styled.main`\n  width: 100%;\n  margin: 32px auto;\n`\n\nconst Upload = () => {\n  // Check to see if there are tracks staged for upload on Node server\n  const queryResult = useQuery(FILES_QUERY);\n\n  const [unstageTracks] = useMutation(UNSTAGE_TRACKS, {\n    refetchQueries: [{ query: FILES_QUERY }],\n  })\n  const [stageTracks] = useMutation(STAGE_TRACKS, {\n    refetchQueries: [{ query: FILES_QUERY}],\n  })\n\n  return (\n    <UploadPage>\n      <FileFormList queryResult={queryResult} unstageTracks={unstageTracks}/>\n      <FileSelector queryResult={queryResult} stageTracks={stageTracks} />\n    </UploadPage>\n  )\n}\n\nexport default Upload;","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/file-form-list.upload.js",["304","305"],"import React from \"react\";\nimport styled from 'styled-components';\nimport {UploadForm} from './upload-form';\nimport {Paper} from 'components/ui';\n\nconst FileUploadContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: column;\n  background-color: ${({theme: {primary}}) => primary[0]};\n  padding: 1rem 1rem;\n  max-width: 960px;\n  margin: 0 auto;\n  border-radius: ${({theme: {borderRadius}}) => borderRadius};\n`\n\nconst FileUploadPaper = styled(Paper)``;\n\nconst FileFormList = ({queryResult: { data, loading, error}, unstageTracks}) => {\n  if (loading) {\n    return <div>loading...</div>;\n  }\n  if (error) {\n    console.log(error.message)\n    return <div>error importing stagedTracks</div>\n  }\n\n  return (\n    // <FileUploadContainer className=\"file-upload-container\">\n\n    // </FileUploadContainer>\n    <FileUploadContainer>\n      {loading && <div>loading...</div>}\n      {error && <div>error importing stagedTracks: {error.message}</div>}\n      {data && data.stagedTracks.length ? (\n        <FileUploadPaper className={'file-upload-paper'}>\n          <>\n              {data.stagedTracks && data.stagedTracks.map((metadata, i) => {\n        \n                return (\n                  <UploadForm metadata={metadata} key={metadata.filename + i} unstageTracks={unstageTracks} idx={i}/>\n              )})}\n            \n          </>\n        </FileUploadPaper>\n        ) : (\n          <span>Choose tracks from your local drive to upload to <span className='brand-text'>meatport</span></span>\n        )}\n  </FileUploadContainer>\n  );\n};\n\nexport default FileFormList;\n","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/file-selector.upload.js",["306","307"],"import React from 'react';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.section`\n  width: 100%;\n  padding: 5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: column;\n`;\n\nconst StyledHeaderWrapper = styled.div`\n  padding: 2rem 0;\n`;\n\nconst StyledInputLabel = styled.label`\n  &.file-upload__label {\n    background-color: ${({theme: {primary}}) => primary[3]};\n    box-shadow: 0 1px 5px 1px rgba(255,255,255,.4);\n    border-radius: 3px;\n    font-size: 1.4rem;\n    text-transform: uppercase;\n    padding: 1rem;\n    transition: all .1s linear;\n    cursor: pointer;\n\n    :hover {\n      box-shadow: 0 2px 10px 3px rgba(255,255,255,.4);\n      transform: translateY(-.2rem);\n    }\n\n    :active {\n      box-shadow: 0 2px 10px 1px rgba(255,255,255,.4);\n      transform: translateY(-.1rem);\n    }\n  }\n\n  input {\n    display: none;\n  }\n`;\n\nconst StyledTypography = styled.span`\n  .big {\n    font-size: 125%;\n  }\n\n  .bigger {\n    font-size: 150%;\n  }\n\n  .biggest {\n    font-size: 200%;\n  }\n\n  .italic {\n    font-style: italic;\n  }\n`;\n\nconst Typography = ({variant = 'span', children}) => (\n  <StyledTypography as={variant}>\n    {children}\n  </StyledTypography>\n)\n\nconst FileSelector = ({queryResult: { data }, stageTracks}) => {\n  \n  const limit = 10;\n  const stagedTrackCount = ((data && data.stagedTracks.length) || 0);\n\n  const handleFileChange = e => {\n    const selected = e.target.files\n    if (!selected.length) return \n    stageTracks({variables: {files: selected}})\n  }\n\n  const helperText = stagedTrackCount >= limit ? (\n    <Typography variant=\"h2\">\n      Upload or unstage tracks to be able to select more.\n    </Typography>\n  ) : (\n    <Typography variant=\"h2\">\n      Choose up to <span className='bigger'>{limit - stagedTrackCount}</span> more WAV, AIFF, FLAC or MP3 file{limit - stagedTrackCount > 1 ? 's' : ''} to stage.\n    </Typography>\n  )\n\n  return (\n    <Wrapper>\n      {stagedTrackCount < limit && (\n        <StyledInputLabel className='file-upload__label'>\n          <input type=\"file\" accept=\".mp3,.wav,.aif,.aiff\" onChange={handleFileChange} multiple />\n          Select Files\n        </StyledInputLabel>\n      )}\n      <StyledHeaderWrapper>\n        {helperText}\n      </StyledHeaderWrapper>\n    </Wrapper>\n  )\n}\n\nexport default FileSelector;\n","/Users/kylemurray/apollo-file-upload/client/src/components/navigation/index.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/navigation/TopNav/index.js",["308","309","310"],"import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport {NavLink, useHistory} from 'react-router-dom';\nimport { FlexSpacer, InlineBrand, Typography } from 'components/ui';\nimport {RolesEnum} from 'global';\nimport {useMeQuery} from 'generated/graphql';\n\nimport {actions} from 'store/slices';\n\n\nconst links = (user) => ({\n  'search': {\n    to: '/search',\n    text: 'Track Search'\n  },\n  'upload': {\n    to: '/upload',\n    text: 'Upload Tracks'\n  },\n  'logout': {\n    to: '/logout',\n    text: 'Sign out'\n  },\n  'user': {\n    to: '/user',\n    text: `Hi, ${user}!`\n  },\n});\n\nconst HeaderItems = styled.div`\n  /* background-color: ${({theme: {primary}}) => primary[0]}; */\n  height: 10rem;\n  margin: 0 auto;\n  padding: 0 1rem;\n  display: flex;\n  align-items: center;\n  max-width: 1232px;\n`\n\nconst HeaderItem = styled.div`\n  padding: 0 1rem;\n  /* border: 1px solid white; */\n  \n  a {\n    text-decoration: none;\n    transition: all .1s linear;\n\n\n    &.navlink-active p {\n      color: ${({theme: {primary}}) => primary[3]};\n    }\n\n    &:not(.navlink-active) div:hover {\n      cursor: pointer;\n    }\n  }\n\n`;\n\n\n\nconst HeaderNav = styled.header`\n`;\n\nconst HeaderLinks = () => {\n  const history = useHistory();\n\n  const {loading, data, error} = useMeQuery({\n    fetchPolicy: \"network-only\"\n});\n  \n  if (loading) {\n    return <div>...loading</div>\n  }\n  if (error || !data?.me) {\n    history.push('/logout')\n    console.log('[index] error: ', error)\n    console.log('[index] data: ', data)\n    return <div>error</div>\n  }\n\n  const {username, role} = data.getUserInfo;\n\n  return (\n    <ul style={{display: 'flex', listStyleType: 'none'}}>\n      {Object.entries(links(username))\n        .filter(([key]) => key !== 'upload' || RolesEnum[role] >= RolesEnum['CONTRIBUTOR'] )\n        .map(([key, {to, text}]) => (\n        <li>\n          <HeaderItem key={key}>\n            <NavLink to={to} activeClassName=\"navlink-active\">\n              <Typography>\n                {text}\n              </Typography>\n            </NavLink>\n          </HeaderItem>\n        </li>\n      ))}\n    </ul>\n  )\n\n}\n\nconst TopNav = () => {\n\n  return (\n    <HeaderNav>\n      <HeaderItems>\n        <HeaderItem>\n          <Typography fontSize=\"2.8rem\">\n            <InlineBrand />\n          </Typography>\n        </HeaderItem>\n        <FlexSpacer />\n        {/* @TODO: User / Logout */}\n        <HeaderLinks />\n      </HeaderItems>\n    </HeaderNav>\n  )\n}\nexport default TopNav;","/Users/kylemurray/apollo-file-upload/client/src/components/Search/components/Search/index.js",["311","312"],"import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport Container from '@material-ui/core/Container';\nimport {SearchField, TrackList} from './components';\n\nconst searchLists = [\n  {\n    key: 'artists',\n    text: 'Artists',\n    queryType: '_artist'\n  },\n  {\n    key: 'titles',\n    text: 'Titles',\n    queryType: '_title'\n  },\n  {\n    key: 'keywords',\n    text: 'Keyword Search',\n    queryType: 'keywords'\n  },\n]\n\nconst TracksPageContainer = styled(Container)`\n\n`\n\nconst SearchTracks = () => {\n  const [query, setQuery] = useState('')\n  const onChange = e => setQuery(e.target.value.toLowerCase());\n\n  return (\n    <TracksPageContainer>\n      <SearchField onChange={onChange} />\n\n      {searchLists.map((list, idx) => (\n        <TrackList key={list.key} query={query} list={list} />\n      ))}\n    </TracksPageContainer>\n  )\n}\n\nexport default SearchTracks;\n","/Users/kylemurray/apollo-file-upload/client/src/components/Search/components/Search/components/index.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Search/components/Search/components/search-field.search.js",["313","314"],"import React from 'react';\nimport styled from 'styled-components'\nimport Box from '@material-ui/core/Box'\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport SearchIcon from '@material-ui/icons/Search'\n\nconst SearchBox = styled(Box)`\n  padding: 60px 0;\n`\nconst SearchText = styled((props) => {\n  return(\n  <TextField classes={{root: 'root'}} {...props} />\n  )}\n)`\n  &.root {\n    padding: 1rem;\n    background-color: ${({theme: {primary}}) => primary[2]};\n\n    & input, svg {\n      font-size: 2.4rem;\n      color: white;\n    }\n  }\n`;\n\nconst SearchField = ({onChange}) => {\n  return (\n    <SearchBox width={1} display=\"flex\" justifyContent=\"center\">\n      <SearchText\n        onChange={onChange}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <SearchIcon />\n            </InputAdornment>\n          ),\n        }}\n      />\n    </SearchBox>\n  )\n}\n\nexport default SearchField;\n","/Users/kylemurray/apollo-file-upload/client/src/components/Search/components/Search/components/track-list.search.js",["315","316","317","318","319","320"],"import React, {useEffect} from 'react';\nimport { useQuery, useLazyQuery} from \"@apollo/client\";\nimport styled from 'styled-components';\nimport {TRACKS_QUERY, DOWNLOAD_TRACKS} from '../../../../apollo';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\nimport axios from 'axios';\nimport fileDownload from 'js-file-download'\n\n\nconst QuerySection = styled(Container)`\n  && {\n    padding: 40px 0;\n    * {\n      color: white;\n    }\n\n    /* &:first-of-type {\n      border-top: 1px solid grey;\n    } */\n    &:not(:last-of-type) {\n      border-bottom: 1px solid ${({theme: {primary}}) => primary[2]};\n    }\n  }\n`\n\nconst StyledTableRow = styled(TableRow)`\n  background-color: ${({theme: {primary}}) => primary[1]};\n\n  &:nth-of-type(odd) {\n    background-color: ${({theme: {primary}}) => primary[2]};\n  }\n\n  :hover {\n    background-color: ${({theme: {primary}}) => primary[3]};\n  }\n`\n\nconst StyledTableCell = styled(TableCell)`\n`\n\nconst TracksTable = styled(Table)`\n  && {\n    background-color: ${({theme: {black}}) => black};\n  \n  & th, td {\n    color: ${({theme: {text}}) => text.white};\n    font-family: 'Barlow Condensed', sans-serif;\n  }\n  }\n`\n\nexport const localAPI = ({url, ...props}) => {\n  const body = JSON.stringify({\n    ...props\n  });\n  let options = {\n    url,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    responseType: 'blob',\n  };\n\n  return axios(options)\n}\n\nconst downloadTrack = async({filename}) => {\n  try {\n    const res = await localAPI({url: 'http://localhost:4000/download', filename});\n    fileDownload(new Blob([res.data]), filename)\n  } catch (err) {\n    console.log('[track-list.search] err.message: ', err.message)\n  }\n}\n\nconst DataRow = ({data: {title, artist, bpm, key, filename}, idx}) => {\n  const [\n    retrieveTrackFromStorage,\n    { loading }\n  ] = useLazyQuery(DOWNLOAD_TRACKS, {\n    fetchPolicy: \"network-only\",\n    onCompleted: () => downloadTrack({filename}),\n    // onError: err => null, display error popup,\n  })\n\n  return (\n    <StyledTableRow key={idx}>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {title}\n      </StyledTableCell>\n      <StyledTableCell align=\"right\">{artist}</StyledTableCell>\n      <StyledTableCell align=\"right\">{bpm}</StyledTableCell>\n      {/* <StyledTableCell align=\"right\">{key}</StyledTableCell> */}\n      <StyledTableCell align=\"right\">{filename}</StyledTableCell>\n      <StyledTableCell align=\"right\">\n        {loading ? <div>...retrieving...</div> : (\n          <>\n          <div style={{cursor: 'pointer'}} onClick={() => retrieveTrackFromStorage({variables: {filename}})}>\n            Select\n            \n          </div>\n          {/* {data && data.retrieveTrackFromStorage === 'Success' && (\n            <div onClick={() => localAPI({url: 'http://localhost:4000/download', filename})}>\n              Download\n            </div>\n          )} */}\n          </>\n        )\n        }\n      </StyledTableCell>\n    </StyledTableRow>\n  )\n}\n\nconst TrackList = ({query = '', list: {key, text, queryType = 'artist'}}) => {\n  const {data, error, loading} = useQuery(TRACKS_QUERY, {\n    variables: {query, queryType}\n  })\n\n  let rows = undefined\n  if (data) {\n    rows = data.searchTracks\n  }\n  \n\n  if (!rows || !rows.length) {\n    return null\n  }\n\n  // if (loading) return <div>...searching...</div>\n  if (error) return <div>...error...</div>\n\n  return (\n    <QuerySection key={key} className=\"bbg-here\">\n      <Typography variant=\"h5\">\n        {text}\n      </Typography>\n      {rows && loading ? <div>...searching...</div> : (\n      <TableContainer component={Paper}>\n      <TracksTable aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Song Title</TableCell>\n            <TableCell align=\"right\">Artist</TableCell>\n            <TableCell align=\"right\">BPM</TableCell>\n            {/* <TableCell align=\"right\">Key</TableCell> */}\n            <TableCell align=\"right\">Filename</TableCell>\n            <TableCell align=\"right\">\n              Download\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row, idx) => (\n            <DataRow key={idx} idx={idx} data={row} />\n          ))}\n        </TableBody>\n      </TracksTable>\n    </TableContainer>)}\n    </QuerySection>\n  )\n}\n\nexport default TrackList;\n","/Users/kylemurray/apollo-file-upload/client/src/components/ui/containers/index.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/ui/flex-util/index.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/ui/buttons/index.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/index.js",["321","322","323","324"],"import React, {useState} from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport {TRACK_UPLOAD} from 'components/apollo'\nimport {useForm} from 'react-hook-form'\nimport {TagList, TagInput} from './tags';\nimport {TrackInfoHeader} from './header';\nimport Legend from './legend';\nimport {\n  uploadFilenameController,\n  trackTitleController,\n  artistController,\n  bpmController,\n  genreController,\n  trackDurationController,\n  trackKeyController,\n} from './controllers';\nimport {FlexGridItem} from 'components/ui'\nimport {filenameFormatTuple, findKey, keyTable, getKeywords} from './util';\nimport {toTitleCase} from 'components/util';\nimport {UploadCard, FormRow, KeyDisplay} from './upload-form.styles';\nimport UploadField from './upload-field';\n\nexport const UploadForm = ({metadata: {\n  title, filename: _filename, format, artist, duration, bpm, key, genre: genreArray\n}, unstageTracks}) => {\n\n  // CREATED FORM VARIABLES\n  const songLength = `${Math.floor(duration / 60)}:${Math.floor(duration % 60).toString().padStart(2, \"0\")}`\n  const [_format, filename] = filenameFormatTuple(_filename);\n  const genre = genreArray.length !== 0 && genreArray[0].toLowerCase() || '';\n  const initialValues = {\n    title,\n    filename,\n    _filename,\n    artist,\n    duration: songLength,\n    bpm,\n    key,\n    genre,\n  };\n\n  // FORM\n  const {register, errors, control, getValues} = useForm({\n    defaultValues: {...initialValues}\n  });\n\n  // GQL\n  const [trackUpload, {loading, data, error}] = useMutation(TRACK_UPLOAD, {\n    onCompleted: (x) => {\n      console.log(x)\n    }\n  })\n\n  // STATE MANAGEMENT\n  const [{keywords, custom}, setTags] = useState({\n    keywords: getKeywords({title, artist, genre}),\n    custom: [],\n  });\n  const [editInputs, setEditInputs] = useState({\n    filename: false,\n    trackTitle: false,\n    artist: false,\n    trackDuration: false,\n    bpm: false,\n    trackKey: false,\n    genre: false,\n  })\n\n  // METHODS\n  const removeTag = (idx) => {\n    const newTags = [...custom];\n    newTags.splice(idx, 1)\n    setTags({\n      keywords,\n      custom: newTags\n    })\n  };\n  \n  const addTag = (newTag) => {\n    if (newTag.length) {\n      const newTags = [...custom]; \n      newTags.push(newTag);\n      setTags({\n        keywords,\n        custom: newTags\n      })\n    }\n  };\n\n  const onClickEdit = (key) => setEditInputs({...editInputs, [key]: true});\n\n  const handleUnstage = () => {\n    unstageTracks({variables: {files: [_filename]}})\n  };\n\n  const handleUpload = () => {\n    const newValues = {\n      ...initialValues,\n      ...getValues()\n    };\n\n    const _artist = newValues.artist.toLowerCase();\n    const _title = newValues.title.toLowerCase();\n    \n    const [min, sec] = newValues.duration.split(':');\n    const intDuration = +min * 60 + +sec;\n\n    const entry = {\n      ...newValues,\n      \n      filename: newValues.filename + _format,\n      duration: intDuration,\n      genre: newValues.genre.toLowerCase(),\n      _filename,\n      key: findKey(newValues.key) || '0',\n      //  @TODO: grab from auth\n      uploader: 'indy',\n      keywords: [...keywords, ...custom],\n      _artist,\n      _title\n    }\n\n    trackUpload({variables: {entry}}).then(({data: {trackUpload: errors}}) => {\n      if (!errors.length) {\n        unstageTracks({variables: {files: [_filename]}})\n      }\n    })\n  };\n\n  const _getKeyString = (key) => {\n    if (!key) return '--'\n\n    const [fifth, openKey] = keyTable[key]\n\n    return (\n      <KeyDisplay>\n        <span>{key}</span>\n        <span>--</span>\n        <span>{fifth}</span>\n        <span>--</span>\n        <span>{openKey}</span>\n      </KeyDisplay>\n    )\n  }\n\n  if (loading) {\n    return <div>...Uploading...</div>\n  }\n\n  if (error) {\n    return <div>...Error...</div>\n  }\n\n  const formInputRows = [\n    {\n      \"track-title\": {\n        gridItem: {},\n        uploadField: {\n          label: \"Track title\",\n          control,\n          onClickEdit: () => onClickEdit('trackTitle'),\n          isEditing: editInputs.trackTitle,\n          inputField: trackTitleController({control}),\n          required: true,\n          prefill: title,\n        },\n      },\n      artist: {\n        gridItem: {},\n        uploadField: {\n          label: \"Artist\",\n          control,\n          onClickEdit: () => onClickEdit('artist'),\n          isEditing: editInputs.artist,\n          inputField: artistController({\n            control,\n            // @TODO: error doesn't work\n            ref: register({\n              required: true,\n              maxLength: 50,\n            })\n          }),\n          required: true,\n          prefill: artist,\n        },\n      },\n    },\n    {\n      length: {\n        gridItem: {xs: 2},\n        uploadField: {\n          label: \"Length\",\n          onClickEdit: () => onClickEdit('trackDuration'),\n          isEditing: editInputs.trackDuration,\n          inputField: trackDurationController({control}),\n          metadata: `${duration}s`,\n          prefill: songLength,\n        },\n      },\n      bpm: {\n        gridItem: {xs: 2},\n        uploadField: {\n          label: \"BPM\",\n          onClickEdit: () => onClickEdit('bpm'),\n          isEditing: editInputs.bpm,\n          inputField: bpmController({control}),\n          metadata: bpm,\n          prefill: bpm,\n        },\n      },\n      \"track-key\": {\n        gridItem: {xs: 4},\n        uploadField: {\n          control,\n          label: \"Key\",\n          onClickEdit: () => onClickEdit('trackKey'),\n          isEditing: editInputs.trackKey,\n          inputField: trackKeyController({control}),\n          metadata: key,\n          prefill: _getKeyString(findKey(key)),\n        },\n      },\n      genre: {\n        gridItem: {xs: 4},\n        uploadField: {\n          label: \"Genre\",\n          onClickEdit: () => onClickEdit('genre'),\n          isEditing: editInputs.genre,\n          inputField: genreController({control}),\n          metadata: genre,\n          required: true,\n          prefill: toTitleCase(genre),\n        },\n      },\n    },\n    {\n      _filename: {\n        gridItem: {xs: 5},\n        uploadField: {\n          label: \"Filename\",\n          prefill: _filename,\n        },\n      },\n      format: {\n        gridItem: {xs: 1},\n        uploadField: {\n          label: \"Format\",\n          prefill: format,\n        },\n      },\n      filename: {\n        gridItem: {xs: 6},\n        uploadField: {\n          label: \"Upload as\",\n          onClickEdit: () => onClickEdit('filename'),\n          isEditing: editInputs.filename,\n          inputField: uploadFilenameController({control, _format}),\n          prefill: _filename,\n        },\n      },\n    },\n  ]\n\n  return (\n    <UploadCard>\n      <TrackInfoHeader upload={handleUpload} unstage={handleUnstage}/>\n      {formInputRows.map((row, i) => (\n        <FormRow className=\"form-row\" key={`row-${i}`}>\n          {Object.entries(row).map(([id, item]) => (\n            <FlexGridItem key={id} {...item.gridItem}>\n              <UploadField {...item.uploadField} />\n            </FlexGridItem>\n          ))}\n        </FormRow>\n      ))}\n      <FormRow className=\"form-row\">\n        <TagList keywords={keywords} custom={custom} removeTag={removeTag} />\n      </FormRow>\n      <FormRow className=\"form-row\">\n        <TagInput addTag={addTag} />\n      </FormRow>\n      <Legend />\n    </UploadCard>\n    )\n}","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/header/index.js",["325","326"],"import React from 'react';\nimport {Wrapper, UploadButtonsWrapper, HeaderText} from './header.styles';\nimport {FlexSpacer, MyButton} from 'components/ui';\n\nexport const TrackInfoHeader = ({upload, unstage}) => {\n  return (\n    <Wrapper className=\"track-info__header--wrapper\">\n      <HeaderText>Track Information</HeaderText>\n      <FlexSpacer />\n      <UploadButtonsWrapper>\n        <MyButton onClick={upload}>Upload</MyButton>\n        <MyButton type=\"error\" className=\"my-button--cancel\" onClick={unstage}>Unstage</MyButton>\n      </UploadButtonsWrapper>\n    </Wrapper>\n  )\n};\n","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/index.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/bpm.controller.js",["327","328","329"],"import {Controller} from 'react-hook-form'\nimport {MyInputField} from '../../../ui'\n\nconst bpmController = ({control, ...props}) => (\n  <Controller\n    control={control}\n    name=\"bpm\"\n    render={(\n      {onChange, value, name},\n    ) => (\n      <MyInputField\n        inputProps = {{\n          name,\n          value,\n          onChange,\n        }}\n      />\n    )}\n  />\n);\n\nexport default bpmController;","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/genre.controller.js",["330","331","332","333","334"],"import {Controller} from 'react-hook-form'\nimport {useQuery} from \"@apollo/client\";\nimport {MyInputField} from '../../../ui'\nimport {GENRES_QUERY} from 'components/apollo'\nimport {toTitleCase} from 'components/util';\n\nimport React, {useState, useEffect} from 'react';\n\nconst GenreSuggest = ({setValue}) => {\n  const [suggestions, setSuggestions] = useState({\n    list: [],\n    text: ''\n  });\n  const [genres, setGenres] = useState([])\n  const {data, error, loading} = useQuery(GENRES_QUERY, {\n    onCompleted: () => setGenres(data && data.getAllGenres.map(({name}) => (name)))\n  })\n\n  const handleChange = ({target: {value}}) => {\n    if (loading) return;\n    let newSuggestions = [];\n    if (value.length > 0) {\n      const regex = new RegExp(`${value}`, `i`);\n      newSuggestions = genres.filter(v => regex.test(v)).sort();\n    }\n\n    setSuggestions({\n      list: newSuggestions,\n      text: value,\n    });\n  }\n\n  // const handleBlur = () => setValue(suggestions.text);\n\n  const suggestionSelected = (value) => {\n    setSuggestions({\n      list: [],\n      text: value,\n    });\n    setValue(value);\n  }\n \n  const renderSuggestions = () => {\n    if (!suggestions.list.length) {\n      return null;\n    }\n    return (\n      <ul>\n        {suggestions.list.map(genre => (\n          <li key={genre} onClick={()=>suggestionSelected(genre)}>\n            {toTitleCase(genre)}\n          </li>\n        ))}\n      </ul>\n    )\n  }\n\n  return (\n    <div>\n      <input\n        name=\"genre\"\n        onChange={handleChange}\n        // onBlur={handleBlur}\n        placeholder=\"Search for or add genre\"\n        value={suggestions.text}\n        type=\"text\"\n      />\n      {renderSuggestions()}\n    </div>\n  );\n}\n\nconst genreController = ({control, ...props}) => (\n  <Controller\n    control={control}\n    name=\"genre\"\n    render={(\n      {onChange, value, name},\n    ) => (\n      <MyInputField\n        inputProps = {{\n          name,\n          value,\n          onChange,\n        }}\n        render = {<GenreSuggest setValue={onChange} />}\n      />\n    )}\n  />\n);\n\nexport default genreController;","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/track-duration.controller.js",["335","336","337"],"import {Controller} from 'react-hook-form'\nimport {MyInputField} from '../../../ui'\n\nconst trackDurationController = ({control, ...props}) => {\n  const handleLengthChange = (idx, subValue, value) => {\n    if (!idx && subValue > 99) return value;\n    if (idx && subValue > 59) return value;\n    console.log('[upload-form.component] subValue: ', subValue)\n    const lengthArray = value.split(':');\n    lengthArray[idx] = subValue.slice(-2);\n    return lengthArray.join(':');\n  };\n\n  return (\n    <Controller\n        control={control}\n        name=\"duration\"\n        rules={{required: true}}\n        render={(\n          {value, name, onChange},\n        ) => (\n          <MyInputField\n            inputProps = {{\n              name,\n              value,\n            }}\n            render = {(\n              <>\n                <input value={value.split(':')[0]} type=\"number\" min=\"0\" onChange={({target: {value: subValue}}) => onChange(handleLengthChange(0, subValue, value))} />\n                  <span>:</span>\n                <input value={value.split(':')[1].padStart(2, '0')} type=\"number\" min=\"0\" onChange={({target: {value: subValue}}) => onChange(handleLengthChange(1, subValue, value))}/>\n              </>\n            )}\n          />\n        )}\n      />\n  )\n};\n\nexport default trackDurationController;","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/track-key.controller.js",["338","339","340"],"import {Controller} from 'react-hook-form'\nimport {MyInputField} from 'components/ui'\nimport {keyTable} from '../util';\n\nconst KeySelect = ({selected, onChange}) => {\n  const keyTableOptions = Object.entries(keyTable).map(([camelot, [fifth, openKey]]) => (\n    {value: camelot, label: `${camelot} - ${fifth} - ${openKey}`}\n  ))\n\n  const selectOptions = {\n    defaultValue: selected === -1 ? 'na' : Object.keys(keyTable)[selected],\n    onChange: onChange,\n  }\n  \n  return (\n    <select {...selectOptions} style={{color: 'black'}}>\n      <option value=\"na\">--</option>\n      {keyTableOptions.map(({value, label}, idx) => (\n        <option key={`key-option${idx}`} value={value}>{label}</option>\n      ))}\n    </select>\n  )\n}\n\nconst trackKeyController = ({control, ...props}) => (\n  <Controller\n    control={control}\n    name=\"key\"\n    render={(\n      {onChange, value, name},\n    ) => (\n      <MyInputField\n        inputProps = {{\n          name,\n          value,\n          onChange,\n        }}\n        render = {\n          // <Select name={name} onChange={({value}) => onChange(value)} options={keyTableOptions} />\n          <KeySelect onChange={onChange} />\n        }\n      />\n    )}\n  />\n);\n\nexport default trackKeyController;","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/artist.controller.js",["341","342","343"],"import {Controller} from 'react-hook-form'\nimport {MyInputField} from '../../../ui'\n\nconst artistController = ({control, ref, ...props}) => (\n  <Controller\n    control={control}\n    name=\"artist\"\n    rules={{required: true}}\n    render={(\n      {onChange, value, name},\n    ) => (\n      <MyInputField\n        inputProps = {{\n          name,\n          value,\n          onChange,\n          ref\n        }}\n      />\n    )}\n  />\n);\n\nexport default artistController;","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/header/header.styles.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/upload-filename.controller.js",["344","345"],"import {Controller} from 'react-hook-form'\nimport {MyInputField} from '../../../ui'\n\nconst uploadFilenameController = ({control, ...props}) => (\n  <Controller\n    control={control}\n    name=\"filename\"\n    render={(\n      {value, name, onChange},\n    ) => {\n      return(\n        <MyInputField\n          suffix={props._format}\n          inputProps = {{\n            name,\n            value,\n            onChange,\n          }}\n        />\n    )}}\n  />\n);\n\nexport default uploadFilenameController;","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/controllers/track-title.controller.js",["346","347","348"],"import {Controller} from 'react-hook-form'\nimport {MyInputField} from 'components/ui'\n\nconst trackTitleController = ({control, ...props}) => (\n  <Controller\n    control={control}\n    name=\"title\"\n    rules={{required: true}}\n    render={(\n      {onChange, value, name},\n    ) => (\n      <MyInputField\n        inputProps = {{\n          name,\n          value,\n          onChange,\n        }}\n      />\n    )}\n  />\n);\n\nexport default trackTitleController;","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/upload-form.styles.js",["349"],"import styled from 'styled-components';\nimport {Card} from 'components/ui';\nimport {FlexRow, FlexGridItem} from 'components/ui'\n\nexport const UploadCard = styled(Card)`\n  &:not(:first-of-type){\n    margin-top: 20px;\n  }\n`\n\nexport const FormRow = styled(FlexRow)`\n  > :not(:first-child) {\n    padding-left: 2rem;\n  }\n\n  &:not(:first-of-type) {\n    padding-top: 1.2rem;\n  }\n`;\n\nexport const KeyDisplay = styled.div`\n  flex: 1;\n  display: flex;\n  justify-content: space-between;\n  padding-right: 1rem;\n`","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/upload-field/index.js",["350","351"],"import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport {\n  FUFWrapper,\n  FUFLabelWrapper,\n  FUFLabel,\n  FUFValue,\n  FUFEditWrapper,\n  FUFMetadata,\n} from './upload-field.styles';\n\nconst FUFEdit = ({onClick}) => {\n  return (\n    <FUFEditWrapper onClick={onClick}>\n      <FontAwesomeIcon size=\"xs\" icon={faPencilAlt} />\n    </FUFEditWrapper>\n  )\n}\n\nconst UploadField = ({\n  label,\n  onClickEdit = null,\n  isEditing = false,\n  metadata = '',\n  inputField = null,\n  prefill,\n  required\n}) => {\n  return (\n    <FUFWrapper>\n      <FUFLabelWrapper>\n        <FUFLabel>{required && '*'}{label}:</FUFLabel>\n        {!!metadata.length && <FUFMetadata>({metadata})</FUFMetadata>}\n      </FUFLabelWrapper>\n      {isEditing || (required && !prefill.length) ? inputField : (\n        <FUFValue>\n          {prefill}\n          {!!onClickEdit && <FUFEdit onClick={onClickEdit} />}\n        </FUFValue>\n      )}\n    </FUFWrapper>\n  )\n}\n\nexport default UploadField;","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/upload-field/upload-field.styles.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/tags/index.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/tags/tag-list.js",["352","353"],"import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\nimport {\n  Wrapper, TagsWrapper, TagLabel, TagClose, TagWrapper\n} from './tags.styles';\n\nconst TagList = ({keywords = [], custom = [], removeTag}) => {\n  const _makeTags = (list, clearable = false) => (\n    list.map((x, idx) => (\n      <TagWrapper key={x + idx} clearable={clearable}>\n        {clearable && (<TagClose onClick={() => removeTag(idx)}><FontAwesomeIcon icon={faTimesCircle} /></TagClose>)}\n        <TagLabel className=\"tag-label\">{x}</TagLabel>\n      </TagWrapper>\n    ))\n  );\n\n  return (\n    <Wrapper> \n      <TagsWrapper>\n        {[ _makeTags(keywords), _makeTags(custom, true)]}\n      </TagsWrapper>\n    </Wrapper>\n  )\n}\n\nexport default TagList;","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/tags/tag-input.js",["354","355"],"import React, {useState} from 'react';\nimport {TagInputWrapper, TagInputSubmit} from './tags.styles';\nimport {MyInputField} from 'components/ui'\n\nconst TagInput = ({addTag}) => {\n  const [newTag, setNewTag] = useState('');\n  const handleChange = ({target: {value}}) => {\n    const allowAlnum = /[^a-z0-9\\s]/i\n    setNewTag(value.replace(allowAlnum, '').toLowerCase());\n  }\n  const handleSubmit = () => {\n    addTag(newTag);\n    setNewTag('');\n  }\n  const disabled = newTag.length === 0;\n\n  return (\n    <TagInputWrapper>\n      <MyInputField width=\"12rem\" inputProps={{onChange: handleChange, value: newTag, placeholder: \"ie: 'uplifting' or 'anjuna'\"}}/>\n      <TagInputSubmit onClick={handleSubmit} disabled={disabled}>Add Tag</TagInputSubmit>\n    </TagInputWrapper>\n  )\n}\n\nexport default TagInput;\n","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/tags/tags.styles.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/legend/index.js",["356","357"],"import React from 'react';\nimport {LegendRow} from './legend.styles';\n\nconst Legend = ({}) => (\n  <LegendRow className=\"upload-form__legend legend-row\">\n    <div className=\"legend\">\n      <span className=\"legend__required\">*required</span>\n      <span className=\"legend__metadata\">(indicates info taken from track metadata)</span>\n    </div>\n  </LegendRow>\n)\n\nexport default Legend","/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/legend/legend.styles.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/util/index.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Upload/upload-form/util/index.js",["358","359","360","361","362","363"],"export const filenameFormatTuple = (_filename) => {\n  const filetypeRe = /\\.[0-9a-z]+$/i\n  const [_format] = _filename.match(filetypeRe);\n  const filename = _filename.replace(filetypeRe, '');\n\n  return [_format, filename];\n}\n\nexport const keyTable = {\n  '1a': ['Abmin', '6m'],\n  '2a': ['Ebmin', '7m'],\n  '3a': ['Bbmin', '8m'],\n  '4a': ['Fmin', '9m'],\n  '5a': ['Cmin', '10m'],\n  '6a': ['Gmin', '11m'],\n  '7a': ['Dmin', '12m'],\n  '8a': ['Amin', '1m'],\n  '9a': ['Emin', '2m'],\n  '10a': ['Bmin', '3m'],\n  '11a': ['F#min', '4m'],\n  '12a': ['Dbmin', '5m'],\n  '1b': ['Bmaj', '6d'],\n  '2b': ['F#maj', '7d'],\n  '3b': ['Dbmaj', '8d'],\n  '4b': ['Abaj', '9d'],\n  '5b': ['Ebaj', '10d'],\n  '6b': ['Bbmaj', '11d'],\n  '7b': ['Fmaj', '12d'],\n  '8b': ['Cmaj', '1d'],\n  '9b': ['Gmaj', '2d'],\n  '10b': ['Dmaj', '3d'],\n  '11b': ['Amaj', '4d'],\n  '12b': ['Emaj', '5d'],\n}\n\nexport const findKey = (key) => {\n  if (key.toLowerCase() in keyTable) return key.toLowerCase();\n\n  return Object.keys(keyTable).find(k => keyTable[k].find(x => {\n    return x.toLowerCase() === key.toLowerCase()\n  })) \n}\n\nexport const getKeywords = ({title, artist, genre}) => {\n  const keywords = [];\n\n  // Split title by word, remove parentheses\n  title.split(' ')\n    .forEach((x) => {\n      keywords.push(x.toLowerCase().replace(/\\W+/g, ''))\n    });\n  // Split artists and split artist names by whitespace\n  artist.split(', ')\n    .map(y => y.split(' ')).flat()\n    .forEach(z => {\n      keywords.push(z.toLowerCase())\n    });\n  genre.length !== 0 && keywords.push(genre);\n\n  return keywords;\n}","/Users/kylemurray/apollo-file-upload/client/src/components/util/string.util.js",["364","365"],"export const toTitleCase = (str) => {\n  return str.replace(\n    /\\w\\S*/g,\n    function(txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    }\n  );\n}","/Users/kylemurray/apollo-file-upload/client/src/index.js",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Auth/index.tsx",[],[],"/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth.styles.tsx",[],"/Users/kylemurray/apollo-file-upload/client/src/components/ui/index.ts",[],"/Users/kylemurray/apollo-file-upload/client/src/components/ui/brand/index.ts",[],"/Users/kylemurray/apollo-file-upload/client/src/components/ui/typography/index.tsx",["366"],"import React from 'react';\nimport {TypographyWrapper} from './typography.styles';\n\ninterface IStyleProps {\n  m?: string,\n  mt?: string,\n  mb?: string,\n  ml?: string,\n  mr?: string,\n  fontSize?: string,\n}\n\ninterface Props {\n  tag?: 'span' | 'div' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'pre',\n  // children: React.ReactChildren| React.ReactChild | JSX.Element | string,\n  fontSize?: string,\n  m?: string,\n  mt?: string,\n  mb?: string,\n  ml?: string,\n  mr?: string,\n}\n\nconst fetchJSXElement = (el: string) => {\n  switch(el) {\n    case \"div\":\n      return <div />\n    default:\n      return <span />\n  }\n} \n\nexport const Typography: React.FC<Props> = ({tag = 'p', children, fontSize, m, mt, mr, mb, ml}) => {\n  const TypographyTag = tag;\n  const styleProps: IStyleProps = {\n    m, mt, mr, mb, ml, fontSize\n  }\n\n  console.log('[index] m: ', m)\n\n  return (\n    <TypographyWrapper className=\"typography\" {...styleProps}>\n      <TypographyTag className=\"typography__tag\">\n        {children}\n      </TypographyTag>\n    </TypographyWrapper>\n  )\n}","/Users/kylemurray/apollo-file-upload/client/src/components/ui/brand/brand.components.tsx",[],"/Users/kylemurray/apollo-file-upload/client/src/components/ui/typography/typography.styles.tsx",[],"/Users/kylemurray/apollo-file-upload/client/src/components/ui/brand/brand.styles.tsx",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth-form/index.tsx",["367","368"],"\nimport React, {useEffect, useState} from 'react';\nimport {Paper} from 'components/ui';\nimport {\n  ToggleState,\n  SignUpValues,\n} from 'types';\nimport styled from 'styled-components';\nimport {SignUp, SignIn} from './components';\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-flow: column;\n  background-color: ${({theme: {primary}}) => primary[0]};\n  padding: 1rem 1rem;\n  max-width: 960px;\n  margin: 0 auto;\n  border-radius: ${({theme: {borderRadius}}) => borderRadius};\n`\n\nconst AuthForm: React.FC = () => {\n  const [isSignUp, setIsSignUp] = useState<boolean>(false);\n  const toggleIsSignUp: ToggleState = () => setIsSignUp(!isSignUp);\n\n  // @TODO: fix to isSignUp\n  const authForm = isSignUp ? <SignUp toggle={toggleIsSignUp} /> : <SignIn toggle={toggleIsSignUp} />;\n\n  return (\n    <Container>\n      <Paper>\n        {authForm}\n      </Paper>\n    </Container>\n  );\n}\n\nexport default AuthForm;\n","/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth-form/components/index.tsx",[],"/Users/kylemurray/apollo-file-upload/client/src/global/index.ts",[],"/Users/kylemurray/apollo-file-upload/client/src/components/ui/dividers/index.ts",[],"/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth-form/components/sign-in.auth.tsx",["369","370","371","372","373","374","375"],"import React, {useState} from 'react';\nimport {useHistory} from 'react-router';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useMutation } from \"@apollo/client\";\nimport * as yup from \"yup\";\nimport {Card, Typography, InlineBrand, MyInputField, MyButton, DividerLine} from 'components/ui';\nimport {\n  AuthForm as AuthFormWrapper,\n  AuthItemWrapper,\n  AuthErrorWrapper,\n  AuthSubContainer,\n  AuthToggleText\n} from './auth-form.styles';\nimport {ToggleState, SignUpValues, IInputFields} from 'types';\nimport {useMeQuery, useLoginMutation, MeDocument} from 'generated/graphql';\nimport {useDispatch} from 'react-redux';\nimport {actions} from 'store/slices';\n\nconst {setAccessToken} = actions\n\nconst schema = yup.object().shape({\n  email: yup.string().required().email(),\n  password: yup.string().required(),\n});\n\ninterface Props {\n  toggle: ToggleState;\n}\n\nconst SignIn: React.FC<Props> = ({toggle}) => {\n  const dispatch = useDispatch();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const { register, handleSubmit, errors, setError } = useForm<SignUpValues>({\n    resolver: yupResolver(schema),\n  });\n\n  const [login, {loading, data, error}] = useLoginMutation({\n    // refetchQueries: [{query: MeDocument}], \n    onCompleted: (x) => {\n      const token = x.login?.accessToken || \"\"\n      localStorage.setItem('token', token);\n      dispatch(setAccessToken(token));\n    }\n  });\n\n  const onSubmit = async (values: SignUpValues): Promise<void> => {\n    const {email, password} = values;\n    await login({variables: {email, password}});\n\n    if (error) {\n      console.log('[sign-in.auth] error: ', error)\n      setErrorMessage(error?.message || \"There was an error loggin in\");\n    }\n  }\n\n  const inputFields: IInputFields = {\n    email: {\n      label: 'Email',\n      placeholder: \"Your email address\",\n      autoComplete: 'off',\n      error: errors?.email?.message,\n    },\n    password: {\n      label: 'Password',\n      placeholder: \"Password\",\n      type: 'password',\n      error: errors?.password?.message\n    },\n  };\n  \n  return (\n    <Card>\n      <AuthSubContainer>\n      <Typography tag=\"h1\">Sign in to <InlineBrand /></Typography>\n      </AuthSubContainer>\n      <AuthFormWrapper>\n        {Object.entries(inputFields).map(([id, {label, error, ...props}]) => (\n          <AuthItemWrapper key={id}>\n            <MyInputField\n              label={label}\n              inputProps={{\n                name: id,\n                ref: register,\n                ...props,\n              }}\n            />\n            {error && (\n              <AuthErrorWrapper>\n                {error}\n              </AuthErrorWrapper>\n            )}\n          </AuthItemWrapper>\n        ))}\n      </AuthFormWrapper>\n      {\n        errorMessage.length > 0 && (<div style={{flex: 1, padding: '.5rem', color: 'red', marginBottom: '2rem'}}>{errorMessage}</div>)\n      }\n      <AuthSubContainer className=\"auth-button\">\n        <MyButton onClick={handleSubmit(onSubmit)}>sign in</MyButton>\n      </AuthSubContainer>\n      \n      <DividerLine />\n      <AuthSubContainer>\n        <div>\n          New to&nbsp;<InlineBrand />?&nbsp;\n          <AuthToggleText onClick={toggle}>\n            Sign up for an free account!\n          </AuthToggleText>\n        </div>\n      </AuthSubContainer>\n    </Card>\n  )\n} ;\n\nexport default SignIn\n","/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth-form/components/sign-up.auth.tsx",["376","377","378","379","380"],"import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useMutation } from \"@apollo/client\";\nimport * as yup from \"yup\";\nimport {Card, Typography, InlineBrand, MyInputField, MyButton, DividerLine} from 'components/ui';\nimport {\n  AuthForm as AuthFormWrapper,\n  AuthItemWrapper,\n  AuthErrorWrapper,\n  AuthSubContainer,\n  AuthToggleText\n} from './auth-form.styles';\nimport {ToggleState, SignUpValues, IInputFields} from 'types';\nimport {useRegisterMutation} from 'generated/graphql';\nimport {useDispatch} from 'react-redux';\nimport {actions} from 'store/slices';\n\nconst {setAccessToken} = actions\n\nconst pwLength = 'Password must be between 8 and 26 characters in length';\n\nconst schema = yup.object().shape({\n  username: yup.string().required(),\n  email: yup.string().required().email(),\n  password: yup.string().required().min(8, pwLength).max(26, pwLength).matches(\n    /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n    \"Must contain at least 1 uppercase, 1 lowercase, 1 \\\n    number and at least one special case character from @$!%*#?&\"\n  ),\n  confirmPassword: yup.string()\n  .oneOf([yup.ref('password'), null], 'Passwords must match'),\n});\n\ninterface Props {\n  toggle: ToggleState;\n}\n\nconst SignUp: React.FC<Props> = ({toggle}) => {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors, reset, setError } = useForm<SignUpValues>({\n    resolver: yupResolver(schema),\n  });\n\n  const [registerUser, {loading, data, error}] = useRegisterMutation({\n    onCompleted: (x) => {\n      const token = x.register?.accessToken || \"\"\n      localStorage.setItem('token', token);\n      dispatch(setAccessToken(token));\n    }\n  });\n\n  const onSubmit = async (values: SignUpValues): Promise<void> => {\n    const {email, password, username} = values;\n    // const {data: {createUserWithEmailAndPassword}} = await fbCreateUser({variables: {email, password, username}});\n    try {\n      await registerUser({variables: {email, password, username}});\n    // const authErr = createUserWithEmailAndPassword.error\n\n      if (error) {\n       console.log('[sign-up.auth] error: ', error)\n      } \n    } catch(err) {\n      // do something if createNewUser throws an error\n      console.log('[sign-up.auth] err: ', err)\n    }\n    \n  }\n\n  const inputFields: IInputFields = {\n    username: {\n      label: 'Username',\n      placeholder: \"Username\",\n      error: errors?.username?.message,\n      autoComplete: 'off',\n    },\n    email: {\n      label: 'Email',\n      placeholder: \"Your email address\",\n      autoComplete: 'off',\n      error: errors?.email?.message,\n    },\n    password: {\n      label: 'Password',\n      placeholder: \"Password\",\n      type: 'password',\n      error: errors?.password?.message\n    },\n    confirmPassword: {\n      label: 'Confirm Password',\n      placeholder: \"Confirm Password\",\n      type: 'password',\n      error: errors?.confirmPassword?.message\n    },\n  };\n\n  return (\n    <Card>\n      <AuthSubContainer>\n        <Typography tag=\"h1\">Sign Up for <InlineBrand /></Typography>\n        <Typography mt=\".5rem\">It's free to view our music library!</Typography>\n      </AuthSubContainer>\n      <AuthFormWrapper>\n        {Object.entries(inputFields).map(([id, {label, error, ...props}]) => (\n          <AuthItemWrapper key={id}>\n            <MyInputField\n              label={label}\n              inputProps={{\n                name: id,\n                ref: register,\n                ...props,\n              }}\n            />\n            {error && (\n              <AuthErrorWrapper>\n                {error}\n              </AuthErrorWrapper>\n            )}\n          </AuthItemWrapper>\n        ))}\n      </AuthFormWrapper>\n      <AuthSubContainer className=\"auth-button\">\n        <MyButton onClick={handleSubmit(onSubmit)}>sign up</MyButton>\n      </AuthSubContainer>\n      \n      <DividerLine />\n      <AuthSubContainer>\n        <div>\n        Already a&nbsp;<InlineBrand />&nbsp;user?&nbsp;\n          <AuthToggleText onClick={toggle}>\n            Sign in instead!\n          </AuthToggleText>\n        </div>\n      </AuthSubContainer>\n    </Card>\n  )\n} ;\n\nexport default SignUp\n","/Users/kylemurray/apollo-file-upload/client/src/components/Auth/auth-form/components/auth-form.styles.tsx",[],"/Users/kylemurray/apollo-file-upload/client/src/generated/graphql.tsx",["381","382","383","384","385","386","387","388","389","390","391","392"],"import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  bye: Scalars['String'];\n  me: User;\n  getStagedTracks: Array<StagedTrack>;\n  searchTracks: Array<Track>;\n  downloadTrack: Scalars['Boolean'];\n  hello2: Scalars['String'];\n};\n\n\nexport type QuerySearchTracksArgs = {\n  query: Scalars['String'];\n  queryType: Scalars['String'];\n};\n\n\nexport type QueryDownloadTrackArgs = {\n  filename: Scalars['String'];\n};\n\nexport type User = {\n  __typename?: 'User';\n  username: Scalars['String'];\n  uploads: Scalars['String'];\n  downloads: Scalars['String'];\n  role: Scalars['String'];\n};\n\nexport type StagedTrack = {\n  __typename?: 'StagedTrack';\n  format: Scalars['String'];\n  title: Scalars['String'];\n  duration: Scalars['Int'];\n  artist: Scalars['String'];\n  key: Scalars['String'];\n  genre: Scalars['String'];\n  filename: Scalars['String'];\n  bpm?: Maybe<Scalars['String']>;\n};\n\nexport type Track = {\n  __typename?: 'Track';\n  id?: Maybe<Scalars['String']>;\n  uploader?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n  artist?: Maybe<Scalars['String']>;\n  artists: Array<Scalars['String']>;\n  duration: Scalars['Int'];\n  key?: Maybe<Scalars['String']>;\n  bpm?: Maybe<Scalars['String']>;\n  genre: Array<Scalars['String']>;\n  keywords: Array<Scalars['String']>;\n  storageBucket?: Maybe<Scalars['String']>;\n  filename?: Maybe<Scalars['String']>;\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  register: AuthResponse;\n  login: AuthResponse;\n  logout: Scalars['Boolean'];\n  deleteFiles: Scalars['Boolean'];\n  stageTracks: Scalars['Boolean'];\n  uploadTrack: Scalars['Boolean'];\n};\n\n\nexport type MutationRegisterArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  username?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  username?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationDeleteFilesArgs = {\n  filenames: Array<Scalars['String']>;\n};\n\n\nexport type MutationStageTracksArgs = {\n  filenames: Array<Scalars['String']>;\n};\n\n\nexport type MutationUploadTrackArgs = {\n  entry: TrackInput;\n};\n\nexport type AuthResponse = {\n  __typename?: 'AuthResponse';\n  accessToken: Scalars['String'];\n};\n\nexport type TrackInput = {\n  uploader: Scalars['String'];\n  _uploader: Scalars['String'];\n  title: Scalars['String'];\n  _title: Scalars['String'];\n  artist: Scalars['String'];\n  _artist: Scalars['String'];\n  artists?: Maybe<Scalars['String']>;\n  duration: Scalars['Int'];\n  key: Scalars['String'];\n  keywords: Array<Scalars['String']>;\n  bpm: Scalars['String'];\n  genre: Scalars['String'];\n  storageBucket: Scalars['String'];\n  filename: Scalars['String'];\n  _filename: Scalars['String'];\n  format: Scalars['String'];\n};\n\nexport type GetStagedTracksQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetStagedTracksQuery = (\n  { __typename?: 'Query' }\n  & { getStagedTracks: Array<(\n    { __typename?: 'StagedTrack' }\n    & Pick<StagedTrack, 'format' | 'title' | 'duration' | 'artist' | 'key' | 'genre' | 'filename' | 'bpm'>\n  )> }\n);\n\nexport type SearchTracksQueryVariables = Exact<{\n  query: Scalars['String'];\n  queryType: Scalars['String'];\n}>;\n\n\nexport type SearchTracksQuery = (\n  { __typename?: 'Query' }\n  & { searchTracks: Array<(\n    { __typename?: 'Track' }\n    & Pick<Track, 'uploader' | 'title' | 'artist' | 'duration' | 'key' | 'bpm' | 'genre' | 'keywords' | 'filename' | 'format'>\n  )> }\n);\n\nexport type DownloadTracksQueryVariables = Exact<{\n  filename: Scalars['String'];\n}>;\n\n\nexport type DownloadTracksQuery = (\n  { __typename?: 'Query' }\n  & Pick<Query, 'downloadTrack'>\n);\n\nexport type UploadTrackMutationVariables = Exact<{\n  entry: TrackInput;\n}>;\n\n\nexport type UploadTrackMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'uploadTrack'>\n);\n\nexport type AuthUserFragment = (\n  { __typename?: 'User' }\n  & Pick<User, 'username' | 'role'>\n);\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = (\n  { __typename?: 'Query' }\n  & { me: (\n    { __typename?: 'User' }\n    & AuthUserFragment\n  ) }\n);\n\nexport type RegisterMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n  username: Scalars['String'];\n}>;\n\n\nexport type RegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { register: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken'>\n  ) }\n);\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = (\n  { __typename?: 'Mutation' }\n  & { login: (\n    { __typename?: 'AuthResponse' }\n    & Pick<AuthResponse, 'accessToken'>\n  ) }\n);\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'logout'>\n);\n\nexport const AuthUserFragmentDoc = gql`\n    fragment AuthUser on User {\n  username\n  role\n}\n    `;\nexport const GetStagedTracksDocument = gql`\n    query GetStagedTracks {\n  getStagedTracks {\n    format\n    title\n    duration\n    artist\n    key\n    genre\n    filename\n    bpm\n  }\n}\n    `;\n\n/**\n * __useGetStagedTracksQuery__\n *\n * To run a query within a React component, call `useGetStagedTracksQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetStagedTracksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetStagedTracksQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetStagedTracksQuery(baseOptions?: Apollo.QueryHookOptions<GetStagedTracksQuery, GetStagedTracksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetStagedTracksQuery, GetStagedTracksQueryVariables>(GetStagedTracksDocument, options);\n      }\nexport function useGetStagedTracksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStagedTracksQuery, GetStagedTracksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetStagedTracksQuery, GetStagedTracksQueryVariables>(GetStagedTracksDocument, options);\n        }\nexport type GetStagedTracksQueryHookResult = ReturnType<typeof useGetStagedTracksQuery>;\nexport type GetStagedTracksLazyQueryHookResult = ReturnType<typeof useGetStagedTracksLazyQuery>;\nexport type GetStagedTracksQueryResult = Apollo.QueryResult<GetStagedTracksQuery, GetStagedTracksQueryVariables>;\nexport const SearchTracksDocument = gql`\n    query SearchTracks($query: String!, $queryType: String!) {\n  searchTracks(query: $query, queryType: $queryType) {\n    uploader\n    title\n    artist\n    duration\n    key\n    bpm\n    genre\n    keywords\n    filename\n    format\n  }\n}\n    `;\n\n/**\n * __useSearchTracksQuery__\n *\n * To run a query within a React component, call `useSearchTracksQuery` and pass it any options that fit your needs.\n * When your component renders, `useSearchTracksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSearchTracksQuery({\n *   variables: {\n *      query: // value for 'query'\n *      queryType: // value for 'queryType'\n *   },\n * });\n */\nexport function useSearchTracksQuery(baseOptions: Apollo.QueryHookOptions<SearchTracksQuery, SearchTracksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SearchTracksQuery, SearchTracksQueryVariables>(SearchTracksDocument, options);\n      }\nexport function useSearchTracksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchTracksQuery, SearchTracksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SearchTracksQuery, SearchTracksQueryVariables>(SearchTracksDocument, options);\n        }\nexport type SearchTracksQueryHookResult = ReturnType<typeof useSearchTracksQuery>;\nexport type SearchTracksLazyQueryHookResult = ReturnType<typeof useSearchTracksLazyQuery>;\nexport type SearchTracksQueryResult = Apollo.QueryResult<SearchTracksQuery, SearchTracksQueryVariables>;\nexport const DownloadTracksDocument = gql`\n    query DownloadTracks($filename: String!) {\n  downloadTrack(filename: $filename)\n}\n    `;\n\n/**\n * __useDownloadTracksQuery__\n *\n * To run a query within a React component, call `useDownloadTracksQuery` and pass it any options that fit your needs.\n * When your component renders, `useDownloadTracksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDownloadTracksQuery({\n *   variables: {\n *      filename: // value for 'filename'\n *   },\n * });\n */\nexport function useDownloadTracksQuery(baseOptions: Apollo.QueryHookOptions<DownloadTracksQuery, DownloadTracksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<DownloadTracksQuery, DownloadTracksQueryVariables>(DownloadTracksDocument, options);\n      }\nexport function useDownloadTracksLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DownloadTracksQuery, DownloadTracksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<DownloadTracksQuery, DownloadTracksQueryVariables>(DownloadTracksDocument, options);\n        }\nexport type DownloadTracksQueryHookResult = ReturnType<typeof useDownloadTracksQuery>;\nexport type DownloadTracksLazyQueryHookResult = ReturnType<typeof useDownloadTracksLazyQuery>;\nexport type DownloadTracksQueryResult = Apollo.QueryResult<DownloadTracksQuery, DownloadTracksQueryVariables>;\nexport const UploadTrackDocument = gql`\n    mutation UploadTrack($entry: TrackInput!) {\n  uploadTrack(entry: $entry)\n}\n    `;\nexport type UploadTrackMutationFn = Apollo.MutationFunction<UploadTrackMutation, UploadTrackMutationVariables>;\n\n/**\n * __useUploadTrackMutation__\n *\n * To run a mutation, you first call `useUploadTrackMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUploadTrackMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uploadTrackMutation, { data, loading, error }] = useUploadTrackMutation({\n *   variables: {\n *      entry: // value for 'entry'\n *   },\n * });\n */\nexport function useUploadTrackMutation(baseOptions?: Apollo.MutationHookOptions<UploadTrackMutation, UploadTrackMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<UploadTrackMutation, UploadTrackMutationVariables>(UploadTrackDocument, options);\n      }\nexport type UploadTrackMutationHookResult = ReturnType<typeof useUploadTrackMutation>;\nexport type UploadTrackMutationResult = Apollo.MutationResult<UploadTrackMutation>;\nexport type UploadTrackMutationOptions = Apollo.BaseMutationOptions<UploadTrackMutation, UploadTrackMutationVariables>;\nexport const MeDocument = gql`\n    query Me {\n  me {\n    ...AuthUser\n  }\n}\n    ${AuthUserFragmentDoc}`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n      }\nexport function useMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, options);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const RegisterDocument = gql`\n    mutation Register($email: String!, $password: String!, $username: String!) {\n  register(email: $email, password: $password, username: $username) {\n    accessToken\n  }\n}\n    `;\nexport type RegisterMutationFn = Apollo.MutationFunction<RegisterMutation, RegisterMutationVariables>;\n\n/**\n * __useRegisterMutation__\n *\n * To run a mutation, you first call `useRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [registerMutation, { data, loading, error }] = useRegisterMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function useRegisterMutation(baseOptions?: Apollo.MutationHookOptions<RegisterMutation, RegisterMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<RegisterMutation, RegisterMutationVariables>(RegisterDocument, options);\n      }\nexport type RegisterMutationHookResult = ReturnType<typeof useRegisterMutation>;\nexport type RegisterMutationResult = Apollo.MutationResult<RegisterMutation>;\nexport type RegisterMutationOptions = Apollo.BaseMutationOptions<RegisterMutation, RegisterMutationVariables>;\nexport const LoginDocument = gql`\n    mutation Login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    accessToken\n  }\n}\n    `;\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation Logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;\n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, options);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;","/Users/kylemurray/apollo-file-upload/client/src/components/ui/inputs/index.tsx",["393","394","395","396","397"],"import React from 'react';\nimport styled from 'styled-components'\n\n\ninterface InputWrapperProps {\n  readonly width?: string\n}\n\nconst Wrapper = styled.div<InputWrapperProps>`\n  border-bottom: 1px solid ${({theme: {primary}}) => primary[3]};\n\n  .flex {\n    display: flex;\n    align-items: flex-end;\n    \n    > div {\n      flex: 1 0 auto;\n    }\n  }\n  \n  input {\n    background-color: transparent;\n    border: 0;\n    height: 2.4rem;\n    line-height: 2.4rem;\n    width: ${({width}) => width || '100%'};\n    padding: 0 .5rem;\n\n    :focus {\n      outline: none;\n      background-color: rgba(0,0,0,.2);\n      font-size: 103%;\n    }\n  }\n`\n\nconst MyInput = styled.input<InputProps>`\n`\n\ninterface InputProps {\n  id?: string\n  type?: string\n  name?: string\n  ref?: React.LegacyRef<HTMLInputElement> | any\n  required?: boolean\n  accept?: string\n  autocomplete?: string\n  autofocus?: string\n  value?: string | number\n}\n\ninterface Props {\n  label?: string\n  inputProps?: InputProps\n  prefix?: string\n  suffix?: string\n  width?: string\n  select?: any\n  selectProps?: any\n  render?: React.FC\n}\n\nexport const MyInputField: React.FC<Props> = ({label, inputProps = {}, prefix = null, suffix = null, render, select, selectProps, width}) => {\n\n  return (\n    <Wrapper width={width}>\n      {label && (\n        <label>\n          {label}\n        </label>\n      )}\n      <div className=\"flex\">\n      {prefix}\n      {render || (\n        <MyInput {...inputProps} />\n        )}\n        {suffix}\n      </div>\n    </Wrapper>\n  )\n}","/Users/kylemurray/apollo-file-upload/client/src/components/Search/index.tsx",[],"/Users/kylemurray/apollo-file-upload/client/src/accessToken.ts",[],[],"/Users/kylemurray/apollo-file-upload/client/src/store/index.ts",[],"/Users/kylemurray/apollo-file-upload/client/src/store/slices/index.ts",[],"/Users/kylemurray/apollo-file-upload/client/src/store/slices/accessToken.ts",[],"/Users/kylemurray/apollo-file-upload/client/src/pages/Loading.tsx",[],{"ruleId":"398","severity":1,"message":"399","line":5,"column":8,"nodeType":"400","messageId":"401","endLine":5,"endColumn":14},{"ruleId":"398","severity":1,"message":"402","line":6,"column":8,"nodeType":"400","messageId":"401","endLine":6,"endColumn":14},{"ruleId":"398","severity":1,"message":"403","line":8,"column":9,"nodeType":"400","messageId":"401","endLine":8,"endColumn":15},{"ruleId":"398","severity":1,"message":"404","line":14,"column":9,"nodeType":"400","messageId":"401","endLine":14,"endColumn":18},{"ruleId":"398","severity":1,"message":"405","line":19,"column":7,"nodeType":"400","messageId":"401","endLine":19,"endColumn":13},{"ruleId":"398","severity":1,"message":"406","line":169,"column":10,"nodeType":"400","messageId":"401","endLine":169,"endColumn":21},{"ruleId":"398","severity":1,"message":"407","line":174,"column":10,"nodeType":"400","messageId":"401","endLine":174,"endColumn":17},{"ruleId":"398","severity":1,"message":"408","line":174,"column":19,"nodeType":"400","messageId":"401","endLine":174,"endColumn":23},{"ruleId":"409","severity":1,"message":"410","line":249,"column":16,"nodeType":"411","messageId":"412","endLine":249,"endColumn":21},{"ruleId":"409","severity":1,"message":"410","line":13,"column":16,"nodeType":"411","messageId":"412","endLine":13,"endColumn":21},{"ruleId":"409","severity":1,"message":"410","line":20,"column":22,"nodeType":"411","messageId":"412","endLine":20,"endColumn":80},{"ruleId":"409","severity":1,"message":"413","line":20,"column":23,"nodeType":"414","messageId":"415","endLine":20,"endColumn":76},{"ruleId":"409","severity":1,"message":"410","line":68,"column":22,"nodeType":"411","messageId":"412","endLine":68,"endColumn":63},{"ruleId":"409","severity":1,"message":"413","line":68,"column":23,"nodeType":"414","messageId":"415","endLine":68,"endColumn":59},{"ruleId":"398","severity":1,"message":"416","line":1,"column":16,"nodeType":"400","messageId":"401","endLine":1,"endColumn":24},{"ruleId":"398","severity":1,"message":"417","line":8,"column":9,"nodeType":"400","messageId":"401","endLine":8,"endColumn":16},{"ruleId":"409","severity":1,"message":"410","line":104,"column":16,"nodeType":"411","messageId":"412","endLine":104,"endColumn":21},{"ruleId":"409","severity":1,"message":"410","line":28,"column":22,"nodeType":"411","messageId":"412","endLine":28,"endColumn":27},{"ruleId":"398","severity":1,"message":"418","line":36,"column":31,"nodeType":"400","messageId":"401","endLine":36,"endColumn":34},{"ruleId":"409","severity":1,"message":"410","line":27,"column":21,"nodeType":"411","messageId":"412","endLine":27,"endColumn":36},{"ruleId":"409","severity":1,"message":"413","line":27,"column":22,"nodeType":"414","messageId":"415","endLine":27,"endColumn":32},{"ruleId":"398","severity":1,"message":"419","line":1,"column":16,"nodeType":"400","messageId":"401","endLine":1,"endColumn":25},{"ruleId":"409","severity":1,"message":"410","line":60,"column":25,"nodeType":"411","messageId":"412","endLine":60,"endColumn":45},{"ruleId":"409","severity":1,"message":"413","line":60,"column":26,"nodeType":"414","messageId":"415","endLine":60,"endColumn":41},{"ruleId":"398","severity":1,"message":"420","line":86,"column":46,"nodeType":"400","messageId":"401","endLine":86,"endColumn":49},{"ruleId":"409","severity":1,"message":"410","line":125,"column":19,"nodeType":"411","messageId":"412","endLine":125,"endColumn":77},{"ruleId":"409","severity":1,"message":"413","line":125,"column":20,"nodeType":"414","messageId":"415","endLine":125,"endColumn":73},{"ruleId":"409","severity":1,"message":"410","line":23,"column":27,"nodeType":"411","messageId":"412","endLine":25,"endColumn":22},{"ruleId":"409","severity":1,"message":"413","line":23,"column":28,"nodeType":"414","messageId":"415","endLine":25,"endColumn":18},{"ruleId":"398","severity":1,"message":"421","line":43,"column":20,"nodeType":"400","messageId":"401","endLine":43,"endColumn":26},{"ruleId":"398","severity":1,"message":"408","line":48,"column":33,"nodeType":"400","messageId":"401","endLine":48,"endColumn":37},{"ruleId":"409","severity":1,"message":"410","line":5,"column":32,"nodeType":"411","messageId":"412","endLine":5,"endColumn":54},{"ruleId":"409","severity":1,"message":"413","line":5,"column":33,"nodeType":"414","messageId":"415","endLine":5,"endColumn":50},{"ruleId":"409","severity":1,"message":"410","line":4,"column":23,"nodeType":"411","messageId":"412","endLine":4,"endColumn":47},{"ruleId":"409","severity":1,"message":"413","line":4,"column":24,"nodeType":"414","messageId":"415","endLine":4,"endColumn":43},{"ruleId":"398","severity":1,"message":"422","line":4,"column":37,"nodeType":"400","messageId":"401","endLine":4,"endColumn":42},{"ruleId":"398","severity":1,"message":"419","line":7,"column":26,"nodeType":"400","messageId":"401","endLine":7,"endColumn":35},{"ruleId":"398","severity":1,"message":"423","line":15,"column":16,"nodeType":"400","messageId":"401","endLine":15,"endColumn":21},{"ruleId":"409","severity":1,"message":"410","line":73,"column":25,"nodeType":"411","messageId":"412","endLine":73,"endColumn":49},{"ruleId":"409","severity":1,"message":"413","line":73,"column":26,"nodeType":"414","messageId":"415","endLine":73,"endColumn":45},{"ruleId":"398","severity":1,"message":"422","line":73,"column":39,"nodeType":"400","messageId":"401","endLine":73,"endColumn":44},{"ruleId":"409","severity":1,"message":"410","line":4,"column":33,"nodeType":"411","messageId":"412","endLine":4,"endColumn":57},{"ruleId":"409","severity":1,"message":"413","line":4,"column":34,"nodeType":"414","messageId":"415","endLine":4,"endColumn":53},{"ruleId":"398","severity":1,"message":"422","line":4,"column":47,"nodeType":"400","messageId":"401","endLine":4,"endColumn":52},{"ruleId":"409","severity":1,"message":"410","line":25,"column":28,"nodeType":"411","messageId":"412","endLine":25,"endColumn":52},{"ruleId":"409","severity":1,"message":"413","line":25,"column":29,"nodeType":"414","messageId":"415","endLine":25,"endColumn":48},{"ruleId":"398","severity":1,"message":"422","line":25,"column":42,"nodeType":"400","messageId":"401","endLine":25,"endColumn":47},{"ruleId":"409","severity":1,"message":"410","line":4,"column":26,"nodeType":"411","messageId":"412","endLine":4,"endColumn":55},{"ruleId":"409","severity":1,"message":"413","line":4,"column":27,"nodeType":"414","messageId":"415","endLine":4,"endColumn":51},{"ruleId":"398","severity":1,"message":"422","line":4,"column":45,"nodeType":"400","messageId":"401","endLine":4,"endColumn":50},{"ruleId":"409","severity":1,"message":"410","line":4,"column":34,"nodeType":"411","messageId":"412","endLine":4,"endColumn":58},{"ruleId":"409","severity":1,"message":"413","line":4,"column":35,"nodeType":"414","messageId":"415","endLine":4,"endColumn":54},{"ruleId":"409","severity":1,"message":"410","line":4,"column":30,"nodeType":"411","messageId":"412","endLine":4,"endColumn":54},{"ruleId":"409","severity":1,"message":"413","line":4,"column":31,"nodeType":"414","messageId":"415","endLine":4,"endColumn":50},{"ruleId":"398","severity":1,"message":"422","line":4,"column":44,"nodeType":"400","messageId":"401","endLine":4,"endColumn":49},{"ruleId":"398","severity":1,"message":"424","line":3,"column":18,"nodeType":"400","messageId":"401","endLine":3,"endColumn":30},{"ruleId":"409","severity":1,"message":"410","line":21,"column":21,"nodeType":"411","messageId":"412","endLine":29,"endColumn":6},{"ruleId":"409","severity":1,"message":"413","line":21,"column":22,"nodeType":"414","messageId":"415","endLine":29,"endColumn":2},{"ruleId":"409","severity":1,"message":"410","line":8,"column":17,"nodeType":"411","messageId":"412","endLine":8,"endColumn":61},{"ruleId":"409","severity":1,"message":"413","line":8,"column":18,"nodeType":"414","messageId":"415","endLine":8,"endColumn":57},{"ruleId":"409","severity":1,"message":"410","line":5,"column":18,"nodeType":"411","messageId":"412","endLine":5,"endColumn":31},{"ruleId":"409","severity":1,"message":"413","line":5,"column":19,"nodeType":"414","messageId":"415","endLine":5,"endColumn":27},{"ruleId":"409","severity":1,"message":"410","line":4,"column":16,"nodeType":"411","messageId":"412","endLine":4,"endColumn":23},{"ruleId":"409","severity":1,"message":"413","line":4,"column":17,"nodeType":"414","messageId":"415","endLine":4,"endColumn":19},{"ruleId":"409","severity":1,"message":"410","line":1,"column":36,"nodeType":"411","messageId":"412","endLine":1,"endColumn":50},{"ruleId":"409","severity":1,"message":"425","line":1,"column":37,"nodeType":"400","messageId":"426","endLine":1,"endColumn":46},{"ruleId":"409","severity":1,"message":"410","line":36,"column":24,"nodeType":"411","messageId":"412","endLine":36,"endColumn":32},{"ruleId":"409","severity":1,"message":"427","line":36,"column":25,"nodeType":"400","messageId":"426","endLine":36,"endColumn":28},{"ruleId":"409","severity":1,"message":"410","line":44,"column":28,"nodeType":"411","messageId":"412","endLine":44,"endColumn":55},{"ruleId":"409","severity":1,"message":"413","line":44,"column":29,"nodeType":"414","messageId":"415","endLine":44,"endColumn":51},{"ruleId":"409","severity":1,"message":"410","line":1,"column":28,"nodeType":"411","messageId":"412","endLine":1,"endColumn":36},{"ruleId":"409","severity":1,"message":"428","line":1,"column":29,"nodeType":"400","messageId":"426","endLine":1,"endColumn":32},{"ruleId":"398","severity":1,"message":"429","line":24,"column":7,"nodeType":"400","messageId":"401","endLine":24,"endColumn":22},{"ruleId":"398","severity":1,"message":"419","line":2,"column":16,"nodeType":"400","messageId":"401","endLine":2,"endColumn":25},{"ruleId":"398","severity":1,"message":"430","line":6,"column":3,"nodeType":"400","messageId":"401","endLine":6,"endColumn":15},{"ruleId":"398","severity":1,"message":"431","line":2,"column":9,"nodeType":"400","messageId":"401","endLine":2,"endColumn":19},{"ruleId":"398","severity":1,"message":"432","line":5,"column":10,"nodeType":"400","messageId":"401","endLine":5,"endColumn":21},{"ruleId":"398","severity":1,"message":"433","line":16,"column":9,"nodeType":"400","messageId":"401","endLine":16,"endColumn":19},{"ruleId":"398","severity":1,"message":"434","line":16,"column":39,"nodeType":"400","messageId":"401","endLine":16,"endColumn":49},{"ruleId":"398","severity":1,"message":"435","line":34,"column":43,"nodeType":"400","messageId":"401","endLine":34,"endColumn":51},{"ruleId":"398","severity":1,"message":"407","line":38,"column":18,"nodeType":"400","messageId":"401","endLine":38,"endColumn":25},{"ruleId":"398","severity":1,"message":"408","line":38,"column":27,"nodeType":"400","messageId":"401","endLine":38,"endColumn":31},{"ruleId":"398","severity":1,"message":"432","line":4,"column":10,"nodeType":"400","messageId":"401","endLine":4,"endColumn":21},{"ruleId":"398","severity":1,"message":"436","line":41,"column":43,"nodeType":"400","messageId":"401","endLine":41,"endColumn":48},{"ruleId":"398","severity":1,"message":"435","line":41,"column":50,"nodeType":"400","messageId":"401","endLine":41,"endColumn":58},{"ruleId":"398","severity":1,"message":"407","line":45,"column":25,"nodeType":"400","messageId":"401","endLine":45,"endColumn":32},{"ruleId":"398","severity":1,"message":"408","line":45,"column":34,"nodeType":"400","messageId":"401","endLine":45,"endColumn":38},{"ruleId":"409","severity":1,"message":"410","line":272,"column":8,"nodeType":"437","messageId":"412","endLine":272,"endColumn":132},{"ruleId":"409","severity":1,"message":"410","line":276,"column":8,"nodeType":"437","messageId":"412","endLine":276,"endColumn":140},{"ruleId":"409","severity":1,"message":"410","line":317,"column":8,"nodeType":"437","messageId":"412","endLine":317,"endColumn":122},{"ruleId":"409","severity":1,"message":"410","line":321,"column":8,"nodeType":"437","messageId":"412","endLine":321,"endColumn":131},{"ruleId":"409","severity":1,"message":"410","line":350,"column":8,"nodeType":"437","messageId":"412","endLine":350,"endColumn":128},{"ruleId":"409","severity":1,"message":"410","line":354,"column":8,"nodeType":"437","messageId":"412","endLine":354,"endColumn":137},{"ruleId":"409","severity":1,"message":"410","line":385,"column":8,"nodeType":"437","messageId":"412","endLine":385,"endColumn":132},{"ruleId":"409","severity":1,"message":"410","line":415,"column":8,"nodeType":"437","messageId":"412","endLine":415,"endColumn":93},{"ruleId":"409","severity":1,"message":"410","line":419,"column":8,"nodeType":"437","messageId":"412","endLine":419,"endColumn":101},{"ruleId":"409","severity":1,"message":"410","line":454,"column":8,"nodeType":"437","messageId":"412","endLine":454,"endColumn":123},{"ruleId":"409","severity":1,"message":"410","line":488,"column":8,"nodeType":"437","messageId":"412","endLine":488,"endColumn":114},{"ruleId":"409","severity":1,"message":"410","line":518,"column":8,"nodeType":"437","messageId":"412","endLine":518,"endColumn":117},{"ruleId":"438","severity":1,"message":"439","line":44,"column":45,"nodeType":"440","messageId":"441","endLine":44,"endColumn":48,"suggestions":"442"},{"ruleId":"438","severity":1,"message":"439","line":58,"column":12,"nodeType":"440","messageId":"441","endLine":58,"endColumn":15,"suggestions":"443"},{"ruleId":"438","severity":1,"message":"439","line":59,"column":17,"nodeType":"440","messageId":"441","endLine":59,"endColumn":20,"suggestions":"444"},{"ruleId":"398","severity":1,"message":"445","line":63,"column":110,"nodeType":"400","messageId":"401","endLine":63,"endColumn":116},{"ruleId":"398","severity":1,"message":"446","line":63,"column":118,"nodeType":"400","messageId":"401","endLine":63,"endColumn":129},"@typescript-eslint/no-unused-vars","'Upload' is defined but never used.","Identifier","unusedVar","'Search' is defined but never used.","'TopNav' is defined but never used.","'RolesEnum' is defined but never used.","'Logout' is assigned a value but never used.","'pageLoading' is assigned a value but never used.","'loading' is assigned a value but never used.","'data' is assigned a value but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","Object pattern argument should be typed.","ObjectPattern","missingArgTypeUnnamed","'useState' is defined but never used.","'actions' is defined but never used.","'idx' is defined but never used.","'useEffect' is defined but never used.","'key' is defined but never used.","'errors' is assigned a value but never used.","'props' is defined but never used.","'error' is assigned a value but never used.","'FlexGridItem' is defined but never used.","Argument '_filename' should be typed.","missingArgType","Argument 'key' should be typed.","Argument 'str' should be typed.","'fetchJSXElement' is assigned a value but never used.","'SignUpValues' is defined but never used.","'useHistory' is defined but never used.","'useMutation' is defined but never used.","'useMeQuery' is defined but never used.","'MeDocument' is defined but never used.","'setError' is assigned a value but never used.","'reset' is assigned a value but never used.","FunctionDeclaration","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["447","448"],["449","450"],["451","452"],"'select' is defined but never used.","'selectProps' is defined but never used.",{"messageId":"453","fix":"454","desc":"455"},{"messageId":"456","fix":"457","desc":"458"},{"messageId":"453","fix":"459","desc":"455"},{"messageId":"456","fix":"460","desc":"458"},{"messageId":"453","fix":"461","desc":"455"},{"messageId":"456","fix":"462","desc":"458"},"suggestUnknown",{"range":"463","text":"464"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"463","text":"465"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"466","text":"464"},{"range":"466","text":"465"},{"range":"467","text":"464"},{"range":"467","text":"465"},[789,792],"unknown","never",[1031,1034],[1051,1054]]